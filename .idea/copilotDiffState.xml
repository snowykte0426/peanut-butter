<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/docs/RELEASE_NOTES.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/RELEASE_NOTES.md" />
              <option name="originalContent" value="# Release Notes&#10;&#10;## v1.1.1&#10;&#10;### Summary&#10;**Dependency Minimization Release** - Transformed Peanut-Butter into a truly lightweight, modular library with **zero forced dependencies**. Users now only receive essential dependencies and can selectively add optional features as needed.&#10;&#10;### Major Improvements&#10;- ** Zero Forced Dependencies**: Reduced core dependencies to only SLF4J API + Kotlin stdlib (from ~20+ transitive dependencies)&#10;- ** Modular Architecture**: All features except basic logging are now optional with `compileOnly` dependencies&#10;- ** Selective Feature Usage**: Users can choose exactly which features to include in their projects&#10;- ** Enhanced Documentation**: Comprehensive dependency management guides and feature matrix&#10;&#10;### Dependency Changes&#10;- **Core (Always Included)**:&#10;  - `org.slf4j:slf4j-api:2.0.9` (logging API)&#10;  - `org.jetbrains.kotlin:kotlin-stdlib:1.9.25` (Kotlin standard library)&#10;  &#10;- **Optional Dependencies** (add only what you need):&#10;  - Jakarta Validation API → for `@FieldEquals`/`@FieldNotEquals` annotations&#10;  - Kotlin Coroutines → for async logging functions (`logInfoAsync`, etc.)&#10;  - Spring Boot Starter → for automatic timezone configuration&#10;  - Your choice of logging implementation (Logback, Log4j2, etc.)&#10;&#10;### New Documentation&#10;- **DEPENDENCY_GUIDE.md**: Complete guide for dependency management&#10;- **Updated README.md**: Clear feature-to-dependency mapping&#10;- **Updated USAGE.md**: Feature availability matrix and setup guides&#10;&#10;### Impact Assessment&#10;- **Before**: All users received Spring Boot, Coroutines, Validation, and Logback dependencies (~15-20MB)&#10;- **After**: Core installation is ~2MB, users add only needed features&#10;- **Backward Compatibility**: 100% - existing code works without changes&#10;&#10;### Migration Guide&#10;**No migration required** - this is a fully backward-compatible optimization:&#10;&#10;1. Update version to `1.1.1`:&#10;   ```kotlin&#10;   implementation(&quot;com.github.snowykte0426:peanut-butter:1.1.1&quot;)&#10;   ```&#10;&#10;2. **If you use validation features**, add:&#10;   ```kotlin&#10;   implementation(&quot;jakarta.validation:jakarta.validation-api:3.0.2&quot;)&#10;   implementation(&quot;org.hibernate.validator:hibernate-validator:8.0.1.Final&quot;)&#10;   ```&#10;&#10;3. **If you use coroutine logging**, add:&#10;   ```kotlin&#10;   implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;   ```&#10;&#10;4. **If you use Spring Boot auto-configuration**, add:&#10;   ```kotlin&#10;   implementation(&quot;org.springframework.boot:spring-boot-starter:3.1.5&quot;)&#10;   ```&#10;&#10;5. **Add a logging implementation** (if not already present):&#10;   ```kotlin&#10;   implementation(&quot;ch.qos.logback:logback-classic:1.5.13&quot;)&#10;   ```&#10;&#10;### Example Configurations&#10;&#10;#### Minimal Setup (Basic Logging Only)&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.1.1&quot;)&#10;    implementation(&quot;ch.qos.logback:logback-classic:1.5.13&quot;)&#10;}&#10;// Size: ~2MB&#10;```&#10;&#10;#### Full Feature Setup&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.1.1&quot;)&#10;    implementation(&quot;ch.qos.logback:logback-classic:1.5.13&quot;)&#10;    implementation(&quot;jakarta.validation:jakarta.validation-api:3.0.2&quot;)&#10;    implementation(&quot;org.hibernate.validator:hibernate-validator:8.0.1.Final&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;    implementation(&quot;org.springframework.boot:spring-boot-starter:3.1.5&quot;)&#10;}&#10;// Size: Same as before, but optional&#10;```&#10;&#10;### Benefits&#10;- ** Reduced Footprint**: Minimal installations use 90% fewer dependencies&#10;- ** Developer Choice**: Choose your preferred logging implementation&#10;- ** Better for Microservices**: Lighter containers and faster startup&#10;- ** Framework Agnostic**: Works equally well with or without Spring Boot&#10;&#10;### Bug Fixes&#10;- None (optimization-focused release)&#10;&#10;### Breaking Changes&#10;- None (fully backward compatible)&#10;&#10;### Deprecated&#10;- None&#10;&#10;### Requirements&#10;- **Minimum**: Java 17+ and SLF4J 2.0+&#10;- **For Kotlin features**: Kotlin 1.9+&#10;- **For validation**: Jakarta Bean Validation 3.0+&#10;- **For coroutine logging**: Kotlin Coroutines 1.7.3+&#10;- **For Spring Boot integration**: Spring Boot 3.1.x&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.1.1&quot;)&#10;}&#10;```&#10;&#10;---&#10;&#10;## v1.1.0&#10;&#10;### Summary&#10;Added automatic TimeZone configuration &amp; utility features enabling application-wide default timezone control, conversion utilities, temporary timezone context execution, and Spring Boot auto-configuration support.&#10;&#10;### New Features&#10;- **Automatic TimeZone Configuration**: Sets the JVM default timezone at startup (`TimeZoneAutoConfiguration`, `TimeZoneProperties`)&#10;- **Configuration Annotation**: `@EnableAutomaticTimeZone` for explicit activation when desired&#10;- **Programmatic Control**: Runtime timezone switching via `TimeZoneInitializer` (`changeTimeZone()`, `getCurrentTimeZone()`)&#10;- **Supported Enum**: `SupportedTimeZone` (UTC, KST, JST, GMT, WET, BST, CET, WEST, CEST, EET, EEST, MST, PT, ET)&#10;- **Extension Utilities**:&#10;  - Current time retrieval: `Any.getCurrentTimeIn(...)`&#10;  - Conversions: `LocalDateTime.inTimeZone(...)`, `ZonedDateTime.convertToTimeZone(...)`&#10;  - Default timezone comparison: `Any.isCurrentTimeZone(...)`&#10;  - Temporary context execution: `Any.withTimeZone(...)`&#10;  - Display name lookup: `Any.getCurrentTimeZoneDisplayName()`&#10;&#10;### Improvements&#10;- Property controls: `peanut-butter.timezone.enabled`, `zone`, `enable-logging` for fine‑grained behavior &amp; logging&#10;- Clearer error signaling: Unsupported timezone triggers descriptive `IllegalArgumentException`&#10;- Logging integration: Successful initialization/change uses `logInfo`, failures use `logWarn`&#10;&#10;### Bug Fixes&#10;- None (feature-focused release)&#10;&#10;### Breaking Changes&#10;- None (no changes to existing public APIs)&#10;&#10;### Deprecated&#10;- None&#10;&#10;### Key Features&#10;- Global default TimeZone auto setup &amp; runtime switching&#10;- Safe temporary TimeZone context (`withTimeZone`)&#10;- Enum-backed validation &amp; standardized timezone identifiers&#10;- Built-in observability through existing logging utilities&#10;&#10;### Requirements&#10;- Java 17+&#10;- Kotlin 1.9+&#10;- Spring Boot 3.1.x (when using auto-configuration)&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.1.0&quot;)&#10;}&#10;```&#10;&#10;### Migration Guide&#10;1. Bump dependency version 1.0.2 → 1.1.0&#10;2. (Optional) Add application.yml configuration:&#10;   ```yaml&#10;   peanut-butter:&#10;     timezone:&#10;       enabled: true&#10;       zone: KST&#10;       enable-logging: true&#10;   ```&#10;3. Inject `TimeZoneInitializer` for runtime changes (e.g. `changeTimeZone(&quot;UTC&quot;)`)&#10;4. Replace ad‑hoc timezone handling with `withTimeZone(...)` where appropriate&#10;&#10;---&#10;&#10;## v1.0.2&#10;&#10;### Summary&#10;Added **coroutine-aware logging** capabilities to the peanut-butter library. This release introduces comprehensive async logging support for Kotlin coroutines, enabling thread-safe logging with advanced features like correlation ID tracking, retry mechanisms, and parallel execution monitoring.&#10;&#10;### New Features&#10;- ** Coroutine Logging**: Complete async logging support for Kotlin coroutines&#10;  - **Async Logging**: `logInfoAsync()`, `logDebugAsync()`, `logErrorAsync()` etc. - Thread-safe logging in coroutines&#10;  - **Async Performance**: `logExecutionTimeAsync()`, `logMethodExecutionAsync()` - Performance tracking for suspend functions&#10;  - **Retry Mechanism**: `retryWithLogging()` - Exponential backoff with comprehensive logging&#10;  - **Correlation Tracking**: `withLoggingContext()` - Enhanced logging with correlation ID for distributed tracing&#10;  - **Parallel Execution**: `executeParallelWithLogging()` - Monitor parallel operations with individual timing&#10;  - **Context Logging**: `logCoroutineContext()` - Debug coroutine context information&#10;&#10;### Improvements&#10;- **Coroutines Support**: Added Kotlin Coroutines 1.7.3 dependency for async features&#10;- **MDC Support**: Mapped Diagnostic Context integration for correlation ID tracking&#10;- **Enhanced Testing**: Added kotlinx-coroutines-test for comprehensive coroutine testing&#10;&#10;### Bug Fixes&#10;None - this is a feature expansion release&#10;&#10;### Breaking Changes&#10;None - fully backward compatible with v1.0.1&#10;&#10;### Deprecated&#10;None&#10;&#10;### Key Features&#10;- ** Production-ready coroutine logging** with thread safety and context preservation&#10;- ** Distributed tracing support** with correlation ID tracking&#10;- **⚡ Intelligent retry mechanisms** with exponential backoff and detailed logging&#10;- ** Parallel operation monitoring** with individual timing and error tracking&#10;&#10;### Requirements&#10;- Java 17+&#10;- Kotlin 1.9+ (for Kotlin features)&#10;- SLF4J 2.0+ (for logging features)&#10;- Jakarta Bean Validation API 3.0+ (for validation features)&#10;- **Kotlin Coroutines 1.7.3+** (for coroutine logging features)&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.0.2&quot;)&#10;}&#10;```&#10;&#10;### Migration Guide&#10;No migration needed from v1.0.1 - simply update the version number. All existing code will continue to work without changes.&#10;&#10;1. Update dependency version to 1.0.2&#10;2. Start using new coroutine logging features in async code&#10;3. Consider migrating existing async logging to new coroutine-aware methods (`logInfoAsync()` instead of `logInfo()` in suspend functions)&#10;&#10;### Usage Examples&#10;&#10;#### Basic Coroutine Logging&#10;```kotlin&#10;suspend fun processUser(userData: UserData) {&#10;    logInfoAsync(&quot;Processing user: {}&quot;, userData.username)&#10;    &#10;    val result = logExecutionTimeAsync(&quot;User processing&quot;) {&#10;        userService.processAsync(userData)&#10;    }&#10;}&#10;```&#10;&#10;#### Resilient Operations with Retry&#10;```kotlin&#10;suspend fun callExternalAPI(): APIResponse {&#10;    return retryWithLogging(&#10;        operation = &quot;External API call&quot;,&#10;        maxAttempts = 3,&#10;        initialDelay = 1000L&#10;    ) {&#10;        externalAPIClient.call()&#10;    }&#10;}&#10;```&#10;&#10;#### Distributed Tracing with Correlation ID&#10;```kotlin&#10;suspend fun handleRequest(requestId: String) {&#10;    withLoggingContext(&quot;req-$requestId&quot;) {&#10;        logInfoAsync(&quot;Starting request processing&quot;)&#10;        // All logs in this block will include the correlation ID&#10;        processRequest()&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## v1.0.1&#10;&#10;### Summary&#10;Major feature expansion adding comprehensive Kotlin support and logging utilities to the peanut-butter library. This release transforms the library from a Java-only validation tool into a full-featured utility library supporting both Java and Kotlin development.&#10;&#10;### New Features&#10;- **Kotlin Support**: Added full Kotlin compatibility with JVM toolchain 17&#10;- **Logger Extensions**: Simple logger creation with `logger()` extension for any class&#10;- **Convenient Logging**: Direct logging methods - `logInfo()`, `logDebug()`, `logError()`, `logWarn()`, `logTrace()`&#10;- **Performance Logging**: Execution time tracking with `logExecutionTime()` and `logMethodExecution()`&#10;- **Exception Handling**: Safe execution with `logOnException()` and `logWarningOnException()`&#10;- **Conditional Logging**: Performance-optimized logging with `logDebugIf{}`, `logInfoIf{}`, etc.&#10;- **Advanced Logger Types**: Lazy initialization with `lazyLogger()` and companion object support with `companionLogger()`&#10;- **Memory Monitoring**: Performance tracking including memory usage with `logPerformance()`&#10;&#10;### Improvements&#10;- **SLF4J Integration**: Added SLF4J 2.0.9 API as core logging foundation&#10;- **Flexible Logging Backend**: Logback 1.5.13 as default but easily replaceable with Log4j2, JUL, etc.&#10;- **Enhanced Testing**: Added Kotest framework for comprehensive Kotlin testing&#10;- **Better Documentation**: Updated README with clear examples and comprehensive USAGE.md guide&#10;&#10;### Bug Fixes&#10;- Minor fixes in validation logic&#10;&#10;### Breaking Changes&#10;None - fully backward compatible with v1.0.0. All existing Java validation features remain unchanged.&#10;&#10;### Deprecated&#10;None&#10;&#10;### Key Features&#10;- Zero-configuration logging setup with sensible defaults&#10;- SLF4J compatibility allows switching between logging frameworks&#10;- Performance-first design with conditional logging to avoid expensive operations&#10;- Natural Kotlin syntax with extension functions&#10;- Comprehensive exception handling with automatic logging&#10;&#10;### Requirements&#10;- Java 17+&#10;- Kotlin 1.9+ (for Kotlin features)&#10;- SLF4J 2.0+ (for logging features)&#10;- Jakarta Bean Validation API 3.0+ (for validation features)&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.0.1&quot;)&#10;}&#10;```&#10;&#10;### Migration Guide&#10;No migration needed from v1.0.0 - simply update the version number. All existing code will continue to work without changes.&#10;&#10;1. Update dependency version to 1.0.1&#10;2. Optionally start using new Kotlin logging features&#10;3. No code changes required for existing validation functionality&#10;&#10;---&#10;&#10;## v1.0.0&#10;&#10;### Summary&#10;Initial release of Peanut-Butter, a comprehensive utility library for Java development.&#10;&#10;### Field Validation Annotations&#10;- **@FieldEquals**: Validates that specified fields have equal values&#10;- **@FieldNotEquals**: Validates that specified fields have different values&#10;&#10;### Key Features&#10;- Class-level validation annotations&#10;- Jakarta Bean Validation compatibility&#10;- Custom error messages&#10;- Inheritance support&#10;- Null-safe validation&#10;&#10;### Requirements&#10;- Java 17+&#10;- Jakarta Bean Validation API 3.0+&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.0.0&quot;)&#10;}&#10;```&#10;&#10;---&#10;&#10;*For detailed usage examples and documentation, please refer to the README.md and USAGE.md*" />
              <option name="updatedContent" value="# Release Notes&#10;&#10;## v1.1.1&#10;&#10;### Summary&#10;**Dependency Minimization Release** - Transformed Peanut-Butter into a truly lightweight, modular library with **zero forced dependencies**. Users now only receive essential dependencies and can selectively add optional features as needed.&#10;&#10;### Major Improvements&#10;- ** Zero Forced Dependencies**: Reduced core dependencies to only SLF4J API + Kotlin stdlib (from ~20+ transitive dependencies)&#10;- ** Modular Architecture**: All features except basic logging are now optional with `compileOnly` dependencies&#10;- ** Selective Feature Usage**: Users can choose exactly which features to include in their projects&#10;- ** Enhanced Documentation**: Comprehensive dependency management guides and feature matrix&#10;&#10;### Improvements&#10;- **DEPENDENCY_GUIDE.md**: Complete guide for dependency management&#10;- **Updated README.md**: Clear feature-to-dependency mapping with modular design explanation&#10;- **Updated USAGE.md**: Feature availability matrix and setup guides for different configurations&#10;- **Modular dependency structure**: Core dependencies separated from optional features&#10;&#10;### Bug Fixes&#10;- None (optimization-focused release)&#10;&#10;### Breaking Changes&#10;- None (fully backward compatible)&#10;&#10;### Deprecated&#10;- None&#10;&#10;### Key Features&#10;- **Zero forced dependencies** beyond SLF4J API and Kotlin stdlib&#10;- **Modular design** allowing selective feature usage&#10;- **90% dependency reduction** for minimal installations (~2MB vs 15-20MB)&#10;- **Developer choice** in logging implementation selection&#10;- **Framework agnostic** - works with or without Spring Boot&#10;&#10;### Requirements&#10;- **Minimum**: Java 17+ and SLF4J 2.0+&#10;- **For Kotlin features**: Kotlin 1.9+&#10;- **For validation**: Jakarta Bean Validation 3.0+&#10;- **For coroutine logging**: Kotlin Coroutines 1.7.3+&#10;- **For Spring Boot integration**: Spring Boot 3.1.x&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.1.1&quot;)&#10;}&#10;```&#10;&#10;### Migration Guide&#10;**No migration required** - this is a fully backward-compatible optimization:&#10;&#10;1. Update version to `1.1.1`&#10;2. **If you use validation features**, add Jakarta Validation API&#10;3. **If you use coroutine logging**, add Kotlin Coroutines  &#10;4. **If you use Spring Boot auto-configuration**, add Spring Boot Starter&#10;5. **Add a logging implementation** (Logback, Log4j2, etc.) if not already present&#10;&#10;---&#10;&#10;## v1.1.0&#10;&#10;### Summary&#10;Added automatic TimeZone configuration &amp; utility features enabling application-wide default timezone control, conversion utilities, temporary timezone context execution, and Spring Boot auto-configuration support.&#10;&#10;### New Features&#10;- **Automatic TimeZone Configuration**: Sets the JVM default timezone at startup (`TimeZoneAutoConfiguration`, `TimeZoneProperties`)&#10;- **Configuration Annotation**: `@EnableAutomaticTimeZone` for explicit activation when desired&#10;- **Programmatic Control**: Runtime timezone switching via `TimeZoneInitializer` (`changeTimeZone()`, `getCurrentTimeZone()`)&#10;- **Supported Enum**: `SupportedTimeZone` (UTC, KST, JST, GMT, WET, BST, CET, WEST, CEST, EET, EEST, MST, PT, ET)&#10;- **Extension Utilities**:&#10;  - Current time retrieval: `Any.getCurrentTimeIn(...)`&#10;  - Conversions: `LocalDateTime.inTimeZone(...)`, `ZonedDateTime.convertToTimeZone(...)`&#10;  - Default timezone comparison: `Any.isCurrentTimeZone(...)`&#10;  - Temporary context execution: `Any.withTimeZone(...)`&#10;  - Display name lookup: `Any.getCurrentTimeZoneDisplayName()`&#10;&#10;### Improvements&#10;- Property controls: `peanut-butter.timezone.enabled`, `zone`, `enable-logging` for fine‑grained behavior &amp; logging&#10;- Clearer error signaling: Unsupported timezone triggers descriptive `IllegalArgumentException`&#10;- Logging integration: Successful initialization/change uses `logInfo`, failures use `logWarn`&#10;&#10;### Bug Fixes&#10;- None (feature-focused release)&#10;&#10;### Breaking Changes&#10;- None (no changes to existing public APIs)&#10;&#10;### Deprecated&#10;- None&#10;&#10;### Key Features&#10;- Global default TimeZone auto setup &amp; runtime switching&#10;- Safe temporary TimeZone context (`withTimeZone`)&#10;- Enum-backed validation &amp; standardized timezone identifiers&#10;- Built-in observability through existing logging utilities&#10;&#10;### Requirements&#10;- Java 17+&#10;- Kotlin 1.9+&#10;- Spring Boot 3.1.x (when using auto-configuration)&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.1.0&quot;)&#10;}&#10;```&#10;&#10;### Migration Guide&#10;1. Bump dependency version 1.0.2 → 1.1.0&#10;2. (Optional) Add application.yml configuration:&#10;   ```yaml&#10;   peanut-butter:&#10;     timezone:&#10;       enabled: true&#10;       zone: KST&#10;       enable-logging: true&#10;   ```&#10;3. Inject `TimeZoneInitializer` for runtime changes (e.g. `changeTimeZone(&quot;UTC&quot;)`)&#10;4. Replace ad‑hoc timezone handling with `withTimeZone(...)` where appropriate&#10;&#10;---&#10;&#10;## v1.0.2&#10;&#10;### Summary&#10;Added **coroutine-aware logging** capabilities to the peanut-butter library. This release introduces comprehensive async logging support for Kotlin coroutines, enabling thread-safe logging with advanced features like correlation ID tracking, retry mechanisms, and parallel execution monitoring.&#10;&#10;### New Features&#10;- ** Coroutine Logging**: Complete async logging support for Kotlin coroutines&#10;  - **Async Logging**: `logInfoAsync()`, `logDebugAsync()`, `logErrorAsync()` etc. - Thread-safe logging in coroutines&#10;  - **Async Performance**: `logExecutionTimeAsync()`, `logMethodExecutionAsync()` - Performance tracking for suspend functions&#10;  - **Retry Mechanism**: `retryWithLogging()` - Exponential backoff with comprehensive logging&#10;  - **Correlation Tracking**: `withLoggingContext()` - Enhanced logging with correlation ID for distributed tracing&#10;  - **Parallel Execution**: `executeParallelWithLogging()` - Monitor parallel operations with individual timing&#10;  - **Context Logging**: `logCoroutineContext()` - Debug coroutine context information&#10;&#10;### Improvements&#10;- **Coroutines Support**: Added Kotlin Coroutines 1.7.3 dependency for async features&#10;- **MDC Support**: Mapped Diagnostic Context integration for correlation ID tracking&#10;- **Enhanced Testing**: Added kotlinx-coroutines-test for comprehensive coroutine testing&#10;&#10;### Bug Fixes&#10;None - this is a feature expansion release&#10;&#10;### Breaking Changes&#10;None - fully backward compatible with v1.0.1&#10;&#10;### Deprecated&#10;None&#10;&#10;### Key Features&#10;- ** Production-ready coroutine logging** with thread safety and context preservation&#10;- ** Distributed tracing support** with correlation ID tracking&#10;- **⚡ Intelligent retry mechanisms** with exponential backoff and detailed logging&#10;- ** Parallel operation monitoring** with individual timing and error tracking&#10;&#10;### Requirements&#10;- Java 17+&#10;- Kotlin 1.9+ (for Kotlin features)&#10;- SLF4J 2.0+ (for logging features)&#10;- Jakarta Bean Validation API 3.0+ (for validation features)&#10;- **Kotlin Coroutines 1.7.3+** (for coroutine logging features)&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.0.2&quot;)&#10;}&#10;```&#10;&#10;### Migration Guide&#10;No migration needed from v1.0.1 - simply update the version number. All existing code will continue to work without changes.&#10;&#10;1. Update dependency version to 1.0.2&#10;2. Start using new coroutine logging features in async code&#10;3. Consider migrating existing async logging to new coroutine-aware methods (`logInfoAsync()` instead of `logInfo()` in suspend functions)&#10;&#10;### Usage Examples&#10;&#10;#### Basic Coroutine Logging&#10;```kotlin&#10;suspend fun processUser(userData: UserData) {&#10;    logInfoAsync(&quot;Processing user: {}&quot;, userData.username)&#10;    &#10;    val result = logExecutionTimeAsync(&quot;User processing&quot;) {&#10;        userService.processAsync(userData)&#10;    }&#10;}&#10;```&#10;&#10;#### Resilient Operations with Retry&#10;```kotlin&#10;suspend fun callExternalAPI(): APIResponse {&#10;    return retryWithLogging(&#10;        operation = &quot;External API call&quot;,&#10;        maxAttempts = 3,&#10;        initialDelay = 1000L&#10;    ) {&#10;        externalAPIClient.call()&#10;    }&#10;}&#10;```&#10;&#10;#### Distributed Tracing with Correlation ID&#10;```kotlin&#10;suspend fun handleRequest(requestId: String) {&#10;    withLoggingContext(&quot;req-$requestId&quot;) {&#10;        logInfoAsync(&quot;Starting request processing&quot;)&#10;        // All logs in this block will include the correlation ID&#10;        processRequest()&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## v1.0.1&#10;&#10;### Summary&#10;Major feature expansion adding comprehensive Kotlin support and logging utilities to the peanut-butter library. This release transforms the library from a Java-only validation tool into a full-featured utility library supporting both Java and Kotlin development.&#10;&#10;### New Features&#10;- **Kotlin Support**: Added full Kotlin compatibility with JVM toolchain 17&#10;- **Logger Extensions**: Simple logger creation with `logger()` extension for any class&#10;- **Convenient Logging**: Direct logging methods - `logInfo()`, `logDebug()`, `logError()`, `logWarn()`, `logTrace()`&#10;- **Performance Logging**: Execution time tracking with `logExecutionTime()` and `logMethodExecution()`&#10;- **Exception Handling**: Safe execution with `logOnException()` and `logWarningOnException()`&#10;- **Conditional Logging**: Performance-optimized logging with `logDebugIf{}`, `logInfoIf{}`, etc.&#10;- **Advanced Logger Types**: Lazy initialization with `lazyLogger()` and companion object support with `companionLogger()`&#10;- **Memory Monitoring**: Performance tracking including memory usage with `logPerformance()`&#10;&#10;### Improvements&#10;- **SLF4J Integration**: Added SLF4J 2.0.9 API as core logging foundation&#10;- **Flexible Logging Backend**: Logback 1.5.13 as default but easily replaceable with Log4j2, JUL, etc.&#10;- **Enhanced Testing**: Added Kotest framework for comprehensive Kotlin testing&#10;- **Better Documentation**: Updated README with clear examples and comprehensive USAGE.md guide&#10;&#10;### Bug Fixes&#10;- Minor fixes in validation logic&#10;&#10;### Breaking Changes&#10;None - fully backward compatible with v1.0.0. All existing Java validation features remain unchanged.&#10;&#10;### Deprecated&#10;None&#10;&#10;### Key Features&#10;- Zero-configuration logging setup with sensible defaults&#10;- SLF4J compatibility allows switching between logging frameworks&#10;- Performance-first design with conditional logging to avoid expensive operations&#10;- Natural Kotlin syntax with extension functions&#10;- Comprehensive exception handling with automatic logging&#10;&#10;### Requirements&#10;- Java 17+&#10;- Kotlin 1.9+ (for Kotlin features)&#10;- SLF4J 2.0+ (for logging features)&#10;- Jakarta Bean Validation API 3.0+ (for validation features)&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.0.1&quot;)&#10;}&#10;```&#10;&#10;### Migration Guide&#10;No migration needed from v1.0.0 - simply update the version number. All existing code will continue to work without changes.&#10;&#10;1. Update dependency version to 1.0.1&#10;2. Optionally start using new Kotlin logging features&#10;3. No code changes required for existing validation functionality&#10;&#10;---&#10;&#10;## v1.0.0&#10;&#10;### Summary&#10;Initial release of Peanut-Butter, a comprehensive utility library for Java development.&#10;&#10;### Field Validation Annotations&#10;- **@FieldEquals**: Validates that specified fields have equal values&#10;- **@FieldNotEquals**: Validates that specified fields have different values&#10;&#10;### Key Features&#10;- Class-level validation annotations&#10;- Jakarta Bean Validation compatibility&#10;- Custom error messages&#10;- Inheritance support&#10;- Null-safe validation&#10;&#10;### Requirements&#10;- Java 17+&#10;- Jakarta Bean Validation API 3.0+&#10;&#10;### Installation&#10;```kotlin&#10;dependencies {&#10;    implementation(&quot;com.github.snowykte0426:peanut-butter:1.0.0&quot;)&#10;}&#10;```&#10;&#10;---&#10;&#10;*For detailed usage examples and documentation, please refer to the README.md and USAGE.md*" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>